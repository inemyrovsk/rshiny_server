name: Deploy to ECR

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      start_deployment:
        type: choice
        options:
          - "true"
          - "false"
        default: "false"
        required: true

jobs:
  build:

    name: Build Image
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.start_deployment == 'true'}}

    steps:

    - name: Check out code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: rshiny-repo
      run: |
        docker build -t 138941284341.dkr.ecr.eu-central-1.amazonaws.com/$ECR_REPOSITORY:${GITHUB_REF_NAME//\//-}-${GITHUB_RUN_NUMBER} .
        docker push 138941284341.dkr.ecr.eu-central-1.amazonaws.com/$ECR_REPOSITORY:${GITHUB_REF_NAME//\//-}-${GITHUB_RUN_NUMBER}
  deploy:
    - name: Check out code
      uses: actions/checkout@v2

    name: Deploy infrastructure
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: hashicorp/setup-terraform@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - run: cd infrastructure/ && ./tf.sh init

      - id: plan
        run:  cd infrastructure/ && ./tf.sh plan -var docker_image_tag=${GITHUB_REF_NAME//\//-}-${GITHUB_RUN_NUMBER}