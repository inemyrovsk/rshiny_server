name: Deploy to ECR

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      start_deployment:
        type: choice
        description: start deployment
        options:
          - "true"
          - "false"
        default: "false"
        required: false

jobs:
  build:

    name: Build Image
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.start_deployment == 'true'}}

    steps:

    - name: Check out code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: rshiny-repo
      run: |
        docker build -t 138941284341.dkr.ecr.eu-central-1.amazonaws.com/$ECR_REPOSITORY:${GITHUB_REF_NAME//\//-}-${GITHUB_RUN_NUMBER} .
        docker push 138941284341.dkr.ecr.eu-central-1.amazonaws.com/$ECR_REPOSITORY:${GITHUB_REF_NAME//\//-}-${GITHUB_RUN_NUMBER}

  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    needs: build
    steps:

      - name: Checkout Repo
        uses: actions/checkout@v1

      - name: Terraform Deploy
        run: |
          cd infrastructure && ./tf.sh init && ./tf.sh plan -var docker_image_tag=${GITHUB_REF_NAME//\//-}-${GITHUB_RUN_NUMBER} && ./tf.sh apply -auto-approve -var docker_image_tag=${GITHUB_REF_NAME//\//-}-${GITHUB_RUN_NUMBER}
        env:
          TF_ACTION_WORKING_DIR: 'infrastructure'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}